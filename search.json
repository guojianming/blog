[{"title":"Spring Boot学习笔记知识点列表（今年内啃完）","url":"/2018/07/15/Spring-Boot学习笔记知识点列表（今年内啃完）/","content":"老猫是在2017年的时候才关注到Spring Boot的，刚开始我的对它的态度是拒绝的，又要我学习新东西。呵呵！直到今年开始深入了解了Spring Boot技术后才知道原来它不是新框架，而是Spring众多框架的中的再封装，让我们可以更好我使用原来熟悉的框架，棒棒的，这时我的态度已经转变。哈哈！   \n<!--more-->\n而且Spring Cloud(微服务的集大成者，云计算的最佳实践!)是在Spring Boot的基本上创建的，所以老猫就要开始学习Spring Boot了！\n\n\n## Spring Boot的技术栈  \n\n![Spring Boot 技术栈](http://payu91z1p.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png)  \n\n## Spring Boot的学习笔记目录 \n> 因为老猫现在工作还没有用Spring Boot，所以为了以后查阅，每学习一个知识点老猫就会写一篇笔记来记录。（好记性不如烂笔头哈！）\n\n1. [Spring Boot学习笔记系列之Spring boot 简介](https://www.easytouseit.win/2018/07/12/Spring-Boot学习笔记系列-简介)\n2. Spring Boot学习笔记系列之Spring Boot快速入门"},{"title":"Java8新特性学习知识点列表（今年内啃完）","url":"/2018/07/12/Java8新特性学习知识点列表（今年内啃完）/","content":"Java 8中的新增功能是自Java 1.0发布18年以来， Java发生的最大变化。没有去掉任何东西，因此你现有的Java代码都能工作，但新功能提供了强大的新语汇和新设计模式，能帮助你编写更清楚、更简洁的代码。\n<!--more-->  \n\n## 前言  \n\n由于老猫现在工作中还是在用jdk1.7，但是最近在自学Spring Boot框架，Spring Boot2 版本对jdk要求的最低版本是1.8，而且现在jdk11最快发布了。所以决定花一些时间来学习一下jdk1.8中的一些新特性。\n\n\n## 为什么要关心Java8\n**在Java8实战中提到我们为什么要关心Java8?其中总结的点也是我要必须学习Java8的原因。**\n   * 请记住语言生态系统的思想，以及语言面临的“要么改变，要么衰亡”的压力。虽然Java可能现在非常有活力，但你可以回忆一下其他曾经也有活力但未能及时改进的语言的命运，如COBOL。\n   * Java 8中新增的核心内容提供了令人激动的新概念和功能，方便我们编写既有效又简洁的程序。\n   * 现有的Java编程实践并不能很好地利用多核处理器。\n   * 函数是一等值；记得方法如何作为函数式值来传递，还有Lambda是怎样写的。\n   * Java 8中Streams的概念使得Collections的许多方面得以推广，让代码更为易读，并允许并行处理流元素。\n   * 你可以在接口中使用默认方法，在实现类没有实现方法时提供方法内容。\n   * 其他来自函数式编程的有趣思想，包括处理null和使用模式匹配。  \n   \n   \n## Java8的新特性  \n<div align=center>\n![java8新特性脑图](http://payu91z1p.bkt.clouddn.com/Java8%E6%96%B0%E7%89%B9%E6%80%A7.png)\n</div>\n\n\n## Java8学习列表\n\n下面是知识点列表，一个知识学习记录一个文章，当然学习的过程中下面的列表有可能发生变化。\n1. Java8特性学习笔记----------Lambda 表达式\n2. Java8特性学习笔记----------方法引用 \n3. Java8特性学习笔记----------默认方法  \n4. Java8特性学习笔记----------函数接口  \n5. Java8特性学习笔记----------Function  \n6. Java8特性学习笔记----------数据流Stream  \n7. Java8特性学习笔记----------Optional API  \n8. Java8特性学习笔记----------Date Time API  \n9. Java8特性学习笔记----------注解是可重复  \n10. Java8特性学习笔记----------高并发","tags":["Java8"],"categories":["Java8 学习笔记"]},{"title":"Spring Boot学习笔记系列之Spring Boot简介","url":"/2018/07/12/Spring-Boot学习笔记系列-简介/","content":"## 历史背景\n\n多年以来，Spring IO平台饱受非议的一点就是大量的XML配置以及复杂的依赖管理。  \n而且随着动态语言的流行（Ruby、Groovy、Scala、Node.js），Java的开发显得格外的笨重；繁多的配置，低下的开发效率，复杂的部署流程以及第三方技术集成难度大。  \n<!--more-->\nSpring团队的CTO回应了这些批评，并且特别提到该平台的目标之一就是实现免XML配置的开发体验。  \n在上述环境下Spring Boot 应运而生，Spring Boot所实现的功能超出了这个任务的描述，开发人员不仅不再需要编写XML，而且在一些场景中甚至不需要编写繁琐的import语句。  \n在对外公开的beta版本刚刚发布之时，Spring Boot描述了如何使用该框架在140个字符内实现可运行的web应用，从而获得了极大的关注度。\n\n## 什么是Spring Boot?  \n\n\n* Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。   \n* 该框架使用了特定的方式（继承starter，约定优先于配置）来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域成为领导者。     \n* Spring boot 是基于Spring4进行设计的，承载了原有Spring框架的优秀基因。它并不是一个框架，从根本上讲，它就是一些库的集合，maven 或者gradle项目导入相应依赖即可使用Spring Boot ,而且无需自行管理这些库的版本。  \n* Spring boot 并不是要成为Spring IO 平台里面众多项目的替代者。Spring Boot 的目标不在于为已经解决的问题域提供新的解决文案，而是为平台 带来另一种的开发体验，从而简化以些已经技术的使用。  \n\n## Spring Boot 的特性\n\n\n1. 快速构建项目；\n2. 对主流开发框架的无配置集成；\n3. 项目可以独立运行，无须外部依赖Servlet容器；\n4. 提供运行时的应用监控；\n5. 极大地提高了开发、部署效率；\n6. 与云计算的天然集成；  \n\n\n\n**具体可以分为以下几点：**\n### 1、无需要手动管理依赖jar包的版本\n Spring Boot 通过spring boot starter 项目管理提供的所有依赖的版本，当升级Spring boot 时，这些依赖版本也会随之升级。个人无需指定版本号，但是也可以自定义版本号覆盖Spring Boot的默认值。\n###  2、自动配置，无需xml\nSpring Boot 尝试根据你添加的jar依赖自动配置你的应用。Spring Boot 的这种自动配置是非侵入式的，你可以定义自己的配置或bean来替代自动配置的内容。\n###  3、外部化配置\nSpring Boot 可以使用properties文件，yaml文件，环境变量，命令行参数等外部化配置。属性值可以使用@Value注解直接注入到bean中，并通过Spring的Environment抽象或经过@configurationProperties注解绑定到结构化对象来访问。\n###  4、嵌入式servlet容器\nSpring Boot 的web模块内置嵌入到Tomcat ,Jetty来构建自包含的servlet容器。servlet容器还可以通过外部化配置来相关定制属性，如\nserver.port,server.session.persistence等。\n###  5、无缝集成Spring security,Spring data,Spring message等框架\nSpring Boot 通过stater pom 来导入这些依赖，当发现相关jar在classpath中时，Spring Boot将启动相应的自动配置。例如，如果security的jar在classpath中，Spring Boot 的web应用将自动启动安全限制，并且默认启动basic认证。\n\n** Spring Boot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xx作为命名的。下面列举一些常用的模块**  \n![](http://payu91z1p.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png)  \n\n\n### 7、devtools提供的开发时特性\nSpring Boot的devtools模块可以为应用增加开发时（development time）特性，例如开发环境属性默认值，自动重启，LiveReload（在自愿发生变化时触发浏览器刷新），全局设置等。  \n\n###  8、Actuator提供的生产特性（health，metrics等）\nActuator是个机器术语，目前没有统一的翻译，可以直译为促动器或执行器，Actuator通过微小的改变就可以产生很大的移动。   \nSpring Boot Actuator为你的应用提供一些生产环境必需的特性，如审计(audit)，健康(health)和数据采集(metrics)等。使你可以在部署应用到生产环境后，通过HTTP（需要SpringMVC），JMX甚至remote shell(SSH, Telnet)等来管理和监视应用。  \n例如，HTTP环境下，访问 contextUrl/health 路径即可查询当前环境的磁盘空间，应用和数据库的状态等；访问contextUrl/metrics路径即可查询当前jvm的内存使用情况，线程池的状态等。\n\n## 使用Spring Boot有什么好处  \n\n* Spring Boot 使编码变简单\n* Spring Boot 使配置变简单\n* Spring Boot 使部署变简单\n* Spring Boot 使监控变简单  \n\n## SpringBoot和SpringMVC的区别\n\n> spring boot只是一个配置工具,整合工具,辅助工具.\n> springmvc是框架,项目中实际运行的代码.\n\n> Spring MVC提供了一种轻度耦合的方式来开发web应用。\n> Spring Boot实现了自动配置，降低了项目搭建的复杂度。\n\n> Spring 是一个“引擎”；\n> Spring MVC 是基于Spring的一个 MVC 框架；\n> Spring Boot 是基于Spring4的条件注册的一套快速开发整合包。\n\n## Spring Boot有哪些不足？\n\n\n* 现时Spring Boot的还需要与外围的框架进行集成  \n* 在服务发现和注册方面  \n* 在认证鉴权方面  \n* 在监控方面  \n**综上，Spring Boot 是微服务框架的起点**","tags":["Spring Boot"],"categories":["Sping Boot 学习"]},{"title":"Hexo 下博客写文章的常用Markdown语法记录","url":"/2018/07/07/Hexo-下博客写文章的常用Markdown语法记录/","content":"老猫第一次用Markdown格式的文件写博客，很多语法格式都不清楚，而且用过的语法也很难记住，所以专门写一篇文章来记录一下常用的Markdown语法，以后要写文章的时候就来看一下。\n<!--more-->\n<div align=center>\n![](http://payu91z1p.bkt.clouddn.com/timg%20%287%29.jpg) \n</div>\n\n**常用语法**  \n\n* 分段 两个回车  \n* 换行 两个空格 + 回车  \n* 引用 > 注意后面紧跟个空格\n* 表格 - 和 | 分割行和列 ， : 控制对其方式  \n* 链接 &#91;文字](链接地址)  \n* 图片 &#33;&#91;说明](链接地址) ，地址可以是本地路劲，也可以是网络地址  \n* 列表 * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格  \n\n\n## 标题 \n\n可以在相应标题文字前加上#号，#号越多标题文字越小。#号的个数表示几级标题，即表示一级标题到六级标题\n\n\n&#35; 一级标题  \n&#35;&#35; 二级标题   \n&#35;&#35;&#35; 三级标题   \n&#35;&#35;&#35;&#35; 四级标题  \n&#35;&#35;&#35;&#35;&#35; 五级标题   \n&#35;&#35;&#35;&#35;&#35; 六级标题  \n\n**查看显示效果：**  \n\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题  \n\n\n## 粗体斜体\n\n\n字体 &#42;&#42;加粗&#42;&#42;  \n字体 &#42;斜体&#42;  \n字体 &#42;&#42;&#42;加粗并斜体&#42;&#42;&#42;   \n字体 \\_\\_加粗\\_\\_ 显示\n字体 \\_斜体\\_ 显示\n字体 \\_\\_\\_加粗并斜体\\_\\_\\_ \n组合 \\*\\_\\_加粗并斜体\\_\\_\\* \n\n\n\n**查看显示效果：**  \n\n字体 **加粗** 显示  \n字体 *斜体* 显示  \n字体 ***加粗并斜体*** 显示  \n字体 __加粗__ 显示  \n字体 _斜体_ 显示  \n字体 ___加粗并斜体___ 显示  \n组合 *__加粗并斜体__* 显示  \n\n\n## 删除线\n\n\\~\\~需要删除的文字\\~\\~\n  \n\n\n**查看显示效果：**  \n\n~~需要删除的文字~~  \n\n\n## 代码块  \n代码快使用三个单引号\n```\n@SpringBootApplication\npublic class DemoApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(DemoApplication.class, args);\n\t}\n}\n```\n \n## 文字高亮\n\n```\n使用<code>\\`</code>来强调字符   //想打出 (反引号)需要转义的，加`<code></code>标签强调  \n比如`突出背景色`来显示强调效果  \n\n```\n\n\n**查看显示效果：**  \n\n使用<code>\\`</code>来强调字符   //想打出  (反引号)需要转义的，加`<code></code>`标签强调  \n比如`突出背景色`来显示强调效果  \n\n\n## 表格\n\n列1   | 列2 | 列3 \n----- | --- | ---- \n第1行 | 12  | 13  \n第2行 | 22  | 23  \n第3行 | 32  | 33 \n \n\n## 分隔符\n\n\n前面的段落\n\n\\-\\-\\-\n\n后面的段落\n \n\n**查看显示效果：**    \n\n前面的段落\n\n---\n\n后面的段落  \n\n\n## 图片居中   \n\n```\n<div align=center>\n![]()\n</div>\n```\n\n\n## 引用  \n\n\n\\> 每行开始都使用 '>'；\n\\> 引用**开始**；\n\\> 引用**换行**；\n\\> 引用**结束**。\n\n\\> 还在引用中！\n\n两个回车结束引用！\n \n\n**查看显示效果：**  \n\n> 每行开始都使用 '>'；  \n> 引用**开始**；  \n> 引用**换行**；  \n> 引用**结束**。  \n\n> 还在引用中！  \n\n两个回车结束引用！\n\n\n## 引用里嵌套引用\n\n\n\\> 最外层引用  \n\\> \\> 多一个 \\> 嵌套一层引用  \n\\> \\> \\> 可以嵌套很多层 \n\n\n\n**查看显示效果：**   \n\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n\n## 注释\n\n```\n\n<!-- 注释 -->\n\n```\n\n## 列表  \n\n\n\\- 列表文本前使用 [减号+空格]  \n\\+ 列表文本前使用 [加号+空格]  \n\\* 列表文本前使用 [星号+空格]  \n\n\\1. 列表前使用 [数字+空格]  \n\\2. 我们会自动帮你添加数字  \n\\7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3  \n\n\\1. 列出所有元素：  \n   \\ - 无序列表元素 A  \n        \\1. 元素 A 的有序子列表  \n    \\- 前面加四个空格  \n\\2. 列表里的多段换行：  \n    \\前面必须加四个空格，  \n    \\这样换行，整体的格式不会乱   \n\\3. 列表里引用：  \n\\  \n    \\> 前面空一行  \n    \\> 仍然需要在 >  前面加四个空格  \n    \n**查看显示效果：**   \n\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n    \n    \n    \n## 特殊字符  \n\n```\n\n! &#33; — 惊叹号Exclamation mark \n” &#34; &quot; 双引号Quotation mark \n# &#35; — 数字标志Number sign \n$ &#36; — 美元标志Dollar sign \n% &#37; — 百分号Percent sign \n& &#38; &amp; Ampersand \n‘ &#39; — 单引号Apostrophe \n( &#40; — 小括号左边部分Left parenthesis \n) &#41; — 小括号右边部分Right parenthesis \n* &#42; — 星号Asterisk \n+ &#43; — 加号Plus sign \n< &#60; &lt; 小于号Less than \n= &#61; — 等于符号Equals sign \n> &#62; &gt; 大于号Greater than \n? &#63; — 问号Question mark \n@ &#64; — Commercial at \n[ &#91; --- 中括号左边部分Left square bracket \n\\ &#92; --- 反斜杠Reverse solidus (backslash) \n] &#93; — 中括号右边部分Right square bracket \n{ &#123; — 大括号左边部分Left curly brace \n| &#124; — 竖线Vertical bar \n} &#125; — 大括号右边部分Right curly brace \n\n```  \n\n\n文中的一些事例来至网络。","tags":["hexo"],"categories":["hexo写博客"]},{"title":"开发人员 在linux服务器上查看日记常用命令","url":"/2018/06/25/ga/","content":"程序不可能没有bug。即使通过测试的程序在上线后也可能出现报错问题。所以一般在职程序员经常要做一件事情：就是从某应用程序的日记其中找出自己想要的信息（程序报错的信息，从而定位到程序出错在哪个类，哪行）。\n<!-- more -->\n![](http://payu91z1p.bkt.clouddn.com/a384dee055fa97e980af2ecd20519316.jpg)\n> 本文总结了我在工作中使用了哪些命令来分析Log文件获取我想要的信息。\n下面介绍我自己常用的一些linux命令（如果有什么错误或者不对的地方欢迎指出，也请大家多多指教）：\n\n## 1、tail 命令\n**1.1 tail命令默认在屏幕上显示指定文件的末尾10行**\n\n````\n tail localhost.2018-01-23.log\n````\n![默认显示最新10行](http://payu91z1p.bkt.clouddn.com/clipboard1.png)\n\n**1.2 tail -f 当文件增长时,输出后续添加的数据**\n````\n tail -f localhost.2018-01-23.log\n````\n![自动显示新增的文件内容](http://payu91z1p.bkt.clouddn.com/clipboard2.png)\n\n**1.3 查看底部即最新200条日记记录，自动显示新增的文件内容**\n````\n tail -f catalina.out -n 200\n````\n![查看最后200条日记记录](http://payu91z1p.bkt.clouddn.com/clipboard3.png)\n\n**1.4  查看字符\"HeartbeatHandler\" 前后2条记录，自动显示新增的文件内容**\n\n````\n tail -f catalina.out |grep \"HeartbeatHandler\" -C 2\n````\n![查看指定的字符串前后几行的最新记录](http://payu91z1p.bkt.clouddn.com/clipboard4.png)\n\n\n**1.5 tail -f *.log 同时监视多个文件的变化 自动显示新增的文件内容 文件排列显示**\n````\n tail -f *.log\n````\n![同时查看多个文件](http://payu91z1p.bkt.clouddn.com/clipboard5.png)\n\n**1.6 退出，按下CTRL+C。**\n\n## 2、vi命令\n> ps:这个命令我用的少，不过我老大一直在用\n\n> vi命令是linux操作系统中最通用的全屏幕纯文本编辑器\n\n> 其中参数 -R：表示以只读方式打开文件；\n\n**2.1 vi只读模式打开文件**\n````\n vi -R catalina.out\n````\n![vi只读模式打开文件](http://payu91z1p.bkt.clouddn.com/clipboard6.png)\n\n\n**2.2 进去后光标定位在首行 要让它显示行号话：输入:`set nu`**\n\n![显示行号](http://payu91z1p.bkt.clouddn.com/clipboard7.png)\n\n\n**2.3 要跳到文件的开始的位置即第一行：输入`gg`**\n\n**2.4 要跳到文件的结束的位置即最后一行:输入`G`**\n\n**2.5 要跳到文件的指定的位置 如到定位到第100行：输入`100G`**\n\n> 在vi里面用Go的缩写字母g表示光标跳动\n\n\n![定位到第100行的位置](http://payu91z1p.bkt.clouddn.com/clipboard8.png)\n\n\n**2.6 从文件头往后面搜索字符串“==”：输入 :`/==`**\n\n![向后搜索指定字符](http://payu91z1p.bkt.clouddn.com/clipboard9.png)\n\n**2.7 从文件尾往前搜索字符串“==”:输入 :`?==`**\n\n**2.8 在搜索字符串的过程中要找到下一个符合搜索条件的地方:按`n`**\n\n**2.9 在搜索字符串的过程中要找到上一个符合搜索条件的地方：按`N`\n在vi里面字母n是Next的缩写 表示下一个**\n\n**2.10 退出vi的命令是：`:q!`**\n\n## 3、less命令\n> 这个命令是我常用的命令，不过时间一久就会忘记一些常用的操作\n\n> less命令可以用来浏览文字文件的内容，用less命令显示文件时，允许用户向前或向后浏览文件。\n\n**3.1 less catalina.out 进入后显示的是文件的首页**\n````\nless catalina.out\n````\n![less命令](http://payu91z1p.bkt.clouddn.com/clipboard10.png)\n\n\n**3.2 从文件头往后面搜索字符串“==”：输入 `/==`**\n![向下搜索](http://payu91z1p.bkt.clouddn.com/clipboard11.png)\n\n\n**3.3 从文件尾往前搜索字符串\"==“:输入 `?==`**\n\n**3.4 在搜索字符串的过程中要找到下一个符合搜索条件的地方:按`n` （与 / 或 ? 有关）**\n\n**3.5 在搜索字符串的过程中要找到上一个符合搜索条件的地方：按`N` （与 / 或 ? 有关）**\n\n**3.6 按` b `向后翻一页 ，按 `d `向后翻半页**\n\n**3.7按`u `向前滚动半页 ，按`y `向前滚动一行 `按空格键` 滚动一行 ，按`回车键` 滚动一页**\n\n**3.8 显示 字符串中文件中出现的次数**\n````\nless catalina.out | grep \"==\" | wc -l \n````\n![统计错误出现的次数](http://payu91z1p.bkt.clouddn.com/clipboard12.png)\n\n**3.9 要退出less程序，应按`Q`键。**\n\n> 以上记录的常用命令 只有本人自己常用 ，整理出来跟大家一起交流。不喜勿喷，我的内心很脆弱。谢谢！","tags":["linux"],"categories":["linux"]}]