<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老猫码坊</title>
  
  <subtitle>老猫的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.easytouseit.win/"/>
  <updated>2018-07-13T08:10:39.226Z</updated>
  <id>https://www.easytouseit.win/</id>
  
  <author>
    <name>老猫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8新特性学习知识点列表（今年内啃完）</title>
    <link href="https://www.easytouseit.win/2018/07/12/Java8%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E5%88%97%E8%A1%A8%EF%BC%88%E4%BB%8A%E5%B9%B4%E5%86%85%E5%95%83%E5%AE%8C%EF%BC%89/"/>
    <id>https://www.easytouseit.win/2018/07/12/Java8新特性学习知识点列表（今年内啃完）/</id>
    <published>2018-07-12T19:05:00.000Z</published>
    <updated>2018-07-13T08:10:39.226Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8中的新增功能是自Java 1.0发布18年以来， Java发生的最大变化。没有去掉任何东西，因此你现有的Java代码都能工作，但新功能提供了强大的新语汇和新设计模式，能帮助你编写更清楚、更简洁的代码。<br><a id="more"></a>  </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于老猫现在工作中还是在用jdk1.7，但是最近在自学Spring Boot框架，Spring Boot2 版本对jdk要求的最低版本是1.8，而且现在jdk11最快发布了。所以决定花一些时间来学习一下jdk1.8中的一些新特性。</p><h2 id="为什么要关心Java8"><a href="#为什么要关心Java8" class="headerlink" title="为什么要关心Java8"></a>为什么要关心Java8</h2><p><strong>在Java8实战中提到我们为什么要关心Java8?其中总结的点也是我要必须学习Java8的原因。</strong></p><ul><li>请记住语言生态系统的思想，以及语言面临的“要么改变，要么衰亡”的压力。虽然Java可能现在非常有活力，但你可以回忆一下其他曾经也有活力但未能及时改进的语言的命运，如COBOL。</li><li>Java 8中新增的核心内容提供了令人激动的新概念和功能，方便我们编写既有效又简洁的程序。</li><li>现有的Java编程实践并不能很好地利用多核处理器。</li><li>函数是一等值；记得方法如何作为函数式值来传递，还有Lambda是怎样写的。</li><li>Java 8中Streams的概念使得Collections的许多方面得以推广，让代码更为易读，并允许并行处理流元素。</li><li>你可以在接口中使用默认方法，在实现类没有实现方法时提供方法内容。</li><li>其他来自函数式编程的有趣思想，包括处理null和使用模式匹配。  </li></ul><h2 id="Java8的新特性"><a href="#Java8的新特性" class="headerlink" title="Java8的新特性"></a>Java8的新特性</h2><div align="center"><br><img src="http://payu91z1p.bkt.clouddn.com/Java8%E6%96%B0%E7%89%B9%E6%80%A7.png" alt="java8新特性脑图"><br></div><h2 id="Java8学习列表"><a href="#Java8学习列表" class="headerlink" title="Java8学习列表"></a>Java8学习列表</h2><p>下面是知识点列表，一个知识学习记录一个文章，当然学习的过程中下面的列表有可能发生变化。</p><ol><li>Java8特性学习笔记———-Lambda 表达式</li><li>Java8特性学习笔记———-方法引用 </li><li>Java8特性学习笔记———-默认方法  </li><li>Java8特性学习笔记———-函数接口  </li><li>Java8特性学习笔记———-Function  </li><li>Java8特性学习笔记———-数据流Stream  </li><li>Java8特性学习笔记———-Optional API  </li><li>Java8特性学习笔记———-Date Time API  </li><li>Java8特性学习笔记———-注解是可重复  </li><li>Java8特性学习笔记———-高并发</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 8中的新增功能是自Java 1.0发布18年以来， Java发生的最大变化。没有去掉任何东西，因此你现有的Java代码都能工作，但新功能提供了强大的新语汇和新设计模式，能帮助你编写更清楚、更简洁的代码。&lt;br&gt;
    
    </summary>
    
      <category term="Java8 学习笔记" scheme="https://www.easytouseit.win/categories/Java8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java8" scheme="https://www.easytouseit.win/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 下博客写文章的常用Markdown语法记录</title>
    <link href="https://www.easytouseit.win/2018/07/07/Hexo-%E4%B8%8B%E5%8D%9A%E5%AE%A2%E5%86%99%E6%96%87%E7%AB%A0%E7%9A%84%E5%B8%B8%E7%94%A8Markdown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.easytouseit.win/2018/07/07/Hexo-下博客写文章的常用Markdown语法记录/</id>
    <published>2018-07-07T13:53:00.000Z</published>
    <updated>2018-07-09T17:27:25.682Z</updated>
    
    <content type="html"><![CDATA[<p>老猫第一次用Markdown格式的文件写博客，很多语法格式都不清楚，而且用过的语法也很难记住，所以专门写一篇文章来记录一下常用的Markdown语法，以后要写文章的时候就来看一下。<br><a id="more"></a></p><div align="center"><br><img src="http://payu91z1p.bkt.clouddn.com/timg%20%287%29.jpg" alt=""><br></div><p><strong>常用语法</strong>  </p><ul><li>分段 两个回车  </li><li>换行 两个空格 + 回车  </li><li>引用 &gt; 注意后面紧跟个空格</li><li>表格 - 和 | 分割行和列 ， : 控制对其方式  </li><li>链接 &#91;文字](链接地址)  </li><li>图片 &#33;&#91;说明](链接地址) ，地址可以是本地路劲，也可以是网络地址  </li><li>列表 * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格  </li></ul><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>可以在相应标题文字前加上#号，#号越多标题文字越小。#号的个数表示几级标题，即表示一级标题到六级标题</p><p>&#35; 一级标题<br>&#35;&#35; 二级标题<br>&#35;&#35;&#35; 三级标题<br>&#35;&#35;&#35;&#35; 四级标题<br>&#35;&#35;&#35;&#35;&#35; 五级标题<br>&#35;&#35;&#35;&#35;&#35; 六级标题  </p><p><strong>查看显示效果：</strong>  </p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="粗体斜体"><a href="#粗体斜体" class="headerlink" title="粗体斜体"></a>粗体斜体</h2><p>字体 &#42;&#42;加粗&#42;&#42;<br>字体 &#42;斜体&#42;<br>字体 &#42;&#42;&#42;加粗并斜体&#42;&#42;&#42;<br>字体 __加粗__ 显示<br>字体 _斜体_ 显示<br>字体 ___加粗并斜体___<br>组合 *__加粗并斜体__* </p><p><strong>查看显示效果：</strong>  </p><p>字体 <strong>加粗</strong> 显示<br>字体 <em>斜体</em> 显示<br>字体 <strong><em>加粗并斜体</em></strong> 显示<br>字体 <strong>加粗</strong> 显示<br>字体 _斜体_ 显示<br>字体 <strong><em>加粗并斜体</em></strong> 显示<br>组合 <em><strong>加粗并斜体</strong></em> 显示  </p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>~~需要删除的文字~~</p><p><strong>查看显示效果：</strong>  </p><p><del>需要删除的文字</del>  </p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码快使用三个单引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="文字高亮"><a href="#文字高亮" class="headerlink" title="文字高亮"></a>文字高亮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用&lt;code&gt;\`&lt;/code&gt;来强调字符   //想打出 (反引号)需要转义的，加`&lt;code&gt;&lt;/code&gt;标签强调  </span><br><span class="line">比如`突出背景色`来显示强调效果</span><br></pre></td></tr></table></figure><p><strong>查看显示效果：</strong>  </p><p>使用<code>`</code>来强调字符   //想打出  (反引号)需要转义的，加<code>&lt;code&gt;&lt;/code&gt;</code>标签强调<br>比如<code>突出背景色</code>来显示强调效果  </p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>列1</th><th>列2</th><th>列3 </th></tr></thead><tbody><tr><td>第1行</td><td>12</td><td>13  </td></tr><tr><td>第2行</td><td>22</td><td>23  </td></tr><tr><td>第3行</td><td>32</td><td>33 </td></tr></tbody></table><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><p>前面的段落</p><p>---</p><p>后面的段落</p><p><strong>查看显示效果：</strong>    </p><p>前面的段落</p><hr><p>后面的段落  </p><h2 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;</span><br><span class="line">![]()</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>> 每行开始都使用 ‘&gt;’；<br>> 引用<strong>开始</strong>；<br>> 引用<strong>换行</strong>；<br>> 引用<strong>结束</strong>。</p><p>> 还在引用中！</p><p>两个回车结束引用！</p><p><strong>查看显示效果：</strong>  </p><blockquote><p>每行开始都使用 ‘&gt;’；<br>引用<strong>开始</strong>；<br>引用<strong>换行</strong>；<br>引用<strong>结束</strong>。  </p></blockquote><blockquote><p>还在引用中！  </p></blockquote><p>两个回车结束引用！</p><h2 id="引用里嵌套引用"><a href="#引用里嵌套引用" class="headerlink" title="引用里嵌套引用"></a>引用里嵌套引用</h2><p>> 最外层引用<br>> > 多一个 > 嵌套一层引用<br>> > > 可以嵌套很多层 </p><p><strong>查看显示效果：</strong>   </p><blockquote><p>最外层引用</p><blockquote><p>多一个 &gt; 嵌套一层引用</p><blockquote><p>可以嵌套很多层</p></blockquote></blockquote></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 注释 --&gt;</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>- 列表文本前使用 [减号+空格]<br>+ 列表文本前使用 [加号+空格]<br>* 列表文本前使用 [星号+空格]  </p><p>\1. 列表前使用 [数字+空格]<br>\2. 我们会自动帮你添加数字<br>\7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3  </p><p>\1. 列出所有元素：<br>   \ - 无序列表元素 A<br>        \1. 元素 A 的有序子列表<br>    - 前面加四个空格<br>\2. 列表里的多段换行：<br>    \前面必须加四个空格，<br>    \这样换行，整体的格式不会乱<br>\3. 列表里引用：<br>\<br>    > 前面空一行<br>    > 仍然需要在 &gt;  前面加四个空格  </p><p><strong>查看显示效果：</strong>   </p><ul><li>列表文本前使用 [减号+空格]</li></ul><ul><li>列表文本前使用 [加号+空格]</li></ul><ul><li>列表文本前使用 [星号+空格]</li></ul><ol><li>列表前使用 [数字+空格]</li><li>我们会自动帮你添加数字</li><li><p>不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</p></li><li><p>列出所有元素：</p><ul><li>无序列表元素 A<ol><li>元素 A 的有序子列表</li></ol></li><li>前面加四个空格</li></ul></li><li>列表里的多段换行：<br> 前面必须加四个空格，<br> 这样换行，整体的格式不会乱</li><li><p>列表里引用：</p><blockquote><p>前面空一行<br>仍然需要在 &gt;  前面加四个空格</p></blockquote></li></ol><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><pre><code>! &amp;#33; — 惊叹号Exclamation mark ” &amp;#34; &amp;quot; 双引号Quotation mark # &amp;#35; — 数字标志Number sign $ &amp;#36; — 美元标志Dollar sign % &amp;#37; — 百分号Percent sign &amp; &amp;#38; &amp;amp; Ampersand ‘ &amp;#39; — 单引号Apostrophe ( &amp;#40; — 小括号左边部分Left parenthesis ) &amp;#41; — 小括号右边部分Right parenthesis * &amp;#42; — 星号Asterisk + &amp;#43; — 加号Plus sign &lt; &amp;#60; &amp;lt; 小于号Less than = &amp;#61; — 等于符号Equals sign &gt; &amp;#62; &amp;gt; 大于号Greater than ? &amp;#63; — 问号Question mark @ &amp;#64; — Commercial at [ &amp;#91; --- 中括号左边部分Left square bracket \ &amp;#92; --- 反斜杠Reverse solidus (backslash) ] &amp;#93; — 中括号右边部分Right square bracket { &amp;#123; — 大括号左边部分Left curly brace | &amp;#124; — 竖线Vertical bar } &amp;#125; — 大括号右边部分Right curly brace </code></pre><p>文中的一些事例来至网络。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老猫第一次用Markdown格式的文件写博客，很多语法格式都不清楚，而且用过的语法也很难记住，所以专门写一篇文章来记录一下常用的Markdown语法，以后要写文章的时候就来看一下。&lt;br&gt;
    
    </summary>
    
      <category term="hexo写博客" scheme="https://www.easytouseit.win/categories/hexo%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="markdown" scheme="https://www.easytouseit.win/tags/markdown/"/>
    
      <category term="hexo" scheme="https://www.easytouseit.win/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>开发人员 在linux服务器上查看日记常用命令</title>
    <link href="https://www.easytouseit.win/2018/06/25/ga/"/>
    <id>https://www.easytouseit.win/2018/06/25/ga/</id>
    <published>2018-06-25T20:52:00.000Z</published>
    <updated>2018-07-06T06:25:42.188Z</updated>
    
    <content type="html"><![CDATA[<p>程序不可能没有bug。即使通过测试的程序在上线后也可能出现报错问题。所以一般在职程序员经常要做一件事情：就是从某应用程序的日记其中找出自己想要的信息（程序报错的信息，从而定位到程序出错在哪个类，哪行）。<br><a id="more"></a><br><img src="http://payu91z1p.bkt.clouddn.com/a384dee055fa97e980af2ecd20519316.jpg" alt=""></p><blockquote><p>本文总结了我在工作中使用了哪些命令来分析Log文件获取我想要的信息。<br>下面介绍我自己常用的一些linux命令（如果有什么错误或者不对的地方欢迎指出，也请大家多多指教）：</p></blockquote><h2 id="1、tail-命令"><a href="#1、tail-命令" class="headerlink" title="1、tail 命令"></a>1、tail 命令</h2><p><strong>1.1 tail命令默认在屏幕上显示指定文件的末尾10行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail localhost.2018-01-23.log</span><br></pre></td></tr></table></figure><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard1.png" alt="默认显示最新10行"></p><p><strong>1.2 tail -f 当文件增长时,输出后续添加的数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f localhost.2018-01-23.log</span><br></pre></td></tr></table></figure></p><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard2.png" alt="自动显示新增的文件内容"></p><p><strong>1.3 查看底部即最新200条日记记录，自动显示新增的文件内容</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f catalina.out -n 200</span><br></pre></td></tr></table></figure></p><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard3.png" alt="查看最后200条日记记录"></p><p><strong>1.4  查看字符”HeartbeatHandler” 前后2条记录，自动显示新增的文件内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f catalina.out |grep &quot;HeartbeatHandler&quot; -C 2</span><br></pre></td></tr></table></figure><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard4.png" alt="查看指定的字符串前后几行的最新记录"></p><p><strong>1.5 tail -f *.log 同时监视多个文件的变化 自动显示新增的文件内容 文件排列显示</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f *.log</span><br></pre></td></tr></table></figure></p><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard5.png" alt="同时查看多个文件"></p><p><strong>1.6 退出，按下CTRL+C。</strong></p><h2 id="2、vi命令"><a href="#2、vi命令" class="headerlink" title="2、vi命令"></a>2、vi命令</h2><blockquote><p>ps:这个命令我用的少，不过我老大一直在用</p></blockquote><blockquote><p>vi命令是linux操作系统中最通用的全屏幕纯文本编辑器</p></blockquote><blockquote><p>其中参数 -R：表示以只读方式打开文件；</p></blockquote><p><strong>2.1 vi只读模式打开文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi -R catalina.out</span><br></pre></td></tr></table></figure></p><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard6.png" alt="vi只读模式打开文件"></p><p><strong>2.2 进去后光标定位在首行 要让它显示行号话：输入:<code>set nu</code></strong></p><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard7.png" alt="显示行号"></p><p><strong>2.3 要跳到文件的开始的位置即第一行：输入<code>gg</code></strong></p><p><strong>2.4 要跳到文件的结束的位置即最后一行:输入<code>G</code></strong></p><p><strong>2.5 要跳到文件的指定的位置 如到定位到第100行：输入<code>100G</code></strong></p><blockquote><p>在vi里面用Go的缩写字母g表示光标跳动</p></blockquote><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard8.png" alt="定位到第100行的位置"></p><p><strong>2.6 从文件头往后面搜索字符串“==”：输入 :<code>/==</code></strong></p><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard9.png" alt="向后搜索指定字符"></p><p><strong>2.7 从文件尾往前搜索字符串“==”:输入 :<code>?==</code></strong></p><p><strong>2.8 在搜索字符串的过程中要找到下一个符合搜索条件的地方:按<code>n</code></strong></p><p><strong>2.9 在搜索字符串的过程中要找到上一个符合搜索条件的地方：按<code>N</code><br>在vi里面字母n是Next的缩写 表示下一个</strong></p><p><strong>2.10 退出vi的命令是：<code>:q!</code></strong></p><h2 id="3、less命令"><a href="#3、less命令" class="headerlink" title="3、less命令"></a>3、less命令</h2><blockquote><p>这个命令是我常用的命令，不过时间一久就会忘记一些常用的操作</p></blockquote><blockquote><p>less命令可以用来浏览文字文件的内容，用less命令显示文件时，允许用户向前或向后浏览文件。</p></blockquote><p><strong>3.1 less catalina.out 进入后显示的是文件的首页</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less catalina.out</span><br></pre></td></tr></table></figure></p><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard10.png" alt="less命令"></p><p><strong>3.2 从文件头往后面搜索字符串“==”：输入 <code>/==</code></strong><br><img src="http://payu91z1p.bkt.clouddn.com/clipboard11.png" alt="向下搜索"></p><p><strong>3.3 从文件尾往前搜索字符串”==“:输入 <code>?==</code></strong></p><p><strong>3.4 在搜索字符串的过程中要找到下一个符合搜索条件的地方:按<code>n</code> （与 / 或 ? 有关）</strong></p><p><strong>3.5 在搜索字符串的过程中要找到上一个符合搜索条件的地方：按<code>N</code> （与 / 或 ? 有关）</strong></p><p><strong>3.6 按<code>b</code>向后翻一页 ，按 <code>d</code>向后翻半页</strong></p><p><strong>3.7按<code>u</code>向前滚动半页 ，按<code>y</code>向前滚动一行 <code>按空格键</code> 滚动一行 ，按<code>回车键</code> 滚动一页</strong></p><p><strong>3.8 显示 字符串中文件中出现的次数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less catalina.out | grep &quot;==&quot; | wc -l</span><br></pre></td></tr></table></figure></p><p><img src="http://payu91z1p.bkt.clouddn.com/clipboard12.png" alt="统计错误出现的次数"></p><p><strong>3.9 要退出less程序，应按<code>Q</code>键。</strong></p><blockquote><p>以上记录的常用命令 只有本人自己常用 ，整理出来跟大家一起交流。不喜勿喷，我的内心很脆弱。谢谢！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序不可能没有bug。即使通过测试的程序在上线后也可能出现报错问题。所以一般在职程序员经常要做一件事情：就是从某应用程序的日记其中找出自己想要的信息（程序报错的信息，从而定位到程序出错在哪个类，哪行）。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.easytouseit.win/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.easytouseit.win/tags/linux/"/>
    
  </entry>
  
</feed>
